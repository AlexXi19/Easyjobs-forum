{"ast":null,"code":"import _objectSpread from \"/Users/Kevin/Desktop/Platform/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/Kevin/Desktop/Platform/react/src/components/CommentForm.js\";\nimport { AddComment, FormatListNumbered } from \"@material-ui/icons\";\nimport React, { Component, useState } from \"react\";\nimport { Form, Image, TextArea } from \"semantic-ui-react\";\nimport Avatar from '@material-ui/core/Avatar';\nvar btnOn = false;\nexport default class CommentForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleFieldChange = event => {\n      const _event$target = event.target,\n            value = _event$target.value,\n            name = _event$target.name;\n      btnOn = true;\n      console.log(btnOn);\n      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        comment: _objectSpread(_objectSpread({}, this.state.comment), {}, {\n          [name]: value\n        })\n      }));\n    };\n\n    this.state = {\n      error: \"\",\n      comment: {\n        name: \"\",\n        message: \"\"\n      }\n    }; // bind context to methods\n\n    this.handleFieldChange = this.handleFieldChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  /**\n   * Handle form input field changes & update the state\n   */\n\n\n  /**\n   * Form submit handler\n   */\n  onSubmit(e) {\n    e.preventDefault();\n\n    if (!this.isFormValid()) {\n      this.setState({\n        error: \"All fields are required.\"\n      });\n      return;\n    }\n\n    this.props.addComment(this.state.comment);\n    this.setState({\n      comment: _objectSpread(_objectSpread({}, this.state.comment), {}, {\n        name: \"\",\n        message: \"\"\n      })\n    });\n  } // loading status and clear error\n  // this.setState({ error: \"\", loading: true });\n  // persist the comments on server\n  //   let { comment } = this.state;\n  //   console.log(comment);\n  //   fetch(\"http://localhost:3000\", {\n  //     method: \"post\",\n  //     body: JSON.stringify(this.state.comment)\n  //   })\n  //     .then(res => res.json())\n  //     .then(res => {\n  //       if (res.error) {\n  //         this.setState({ loading: false, error: res.error });\n  //       } else {\n  //         // add time return from api and push comment to parent state\n  //         this.state.comment.time = res.time;\n  //         this.props.addComment(this.state.comment);\n  //         // clear the message box\n  //         this.setState({\n  //           loading: false,\n  //           comment: { ...this.state.comment, message: \"\" }\n  //         });\n  //       }\n  //     })\n  //     .catch(err => {\n  //       this.setState({\n  //         error: \"Something went wrong while submitting form.\",\n  //         loading: false\n  //       });\n  //     });\n  // }\n\n\n  isFormValid() {\n    return this.state.comment.name !== \"\" && this.state.comment.message !== \"\";\n  }\n\n  renderError() {\n    return this.state.error ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, this.state.error) : null;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      method: \"post\",\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Avatar, {\n      \"aria-label\": \"recipe\",\n      className: \"avatar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }, \"R\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.handleFieldChange,\n      value: this.state.comment.name,\n      className: \"form-control\",\n      placeholder: \"\\uD83D\\uDE0E Your Name\",\n      name: \"name\",\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Form.TextArea, {\n      onChange: this.handleFieldChange,\n      value: this.state.comment.message,\n      name: \"message\",\n      placeholder: \"Add a public comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 10\n      }\n    }), this.renderError(), btnOn ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"commentBTN\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Form.Button, {\n      primary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }, \"Comment\")) : null));\n  }\n\n}","map":{"version":3,"sources":["/Users/Kevin/Desktop/Platform/react/src/components/CommentForm.js"],"names":["AddComment","FormatListNumbered","React","Component","useState","Form","Image","TextArea","Avatar","btnOn","CommentForm","constructor","props","handleFieldChange","event","target","value","name","console","log","setState","state","comment","error","message","bind","onSubmit","e","preventDefault","isFormValid","addComment","renderError","render"],"mappings":"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","sourcesContent":["import { AddComment, FormatListNumbered } from \"@material-ui/icons\";\nimport React, { Component,useState} from \"react\";\nimport {Form,Image,TextArea} from \"semantic-ui-react\";\nimport Avatar from '@material-ui/core/Avatar';\n\nvar btnOn=false;\n\nexport default class CommentForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: \"\",\n\n      comment: {\n        name: \"\",\n        message: \"\"\n      }\n    };\n\n    // bind context to methods\n    this.handleFieldChange = this.handleFieldChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Handle form input field changes & update the state\n   */\n  \n  handleFieldChange = event => {\n    const { value, name } = event.target;\n    btnOn=true;\n    console.log(btnOn);\n    this.setState({\n      ...this.state,\n      comment: {\n        ...this.state.comment,\n        [name]: value\n      }\n    });\n  };\n\n  /**\n   * Form submit handler\n   */\n  onSubmit(e) {\n    e.preventDefault();\n\n    if (!this.isFormValid()) {\n      this.setState({ error: \"All fields are required.\" });\n      return;\n    }\n    this.props.addComment(this.state.comment);\n             this.setState({\n            comment: { ...this.state.comment,name:\"\", message: \"\" }\n          });\n  }\n\n    // loading status and clear error\n    // this.setState({ error: \"\", loading: true });\n\n    // persist the comments on server\n  //   let { comment } = this.state;\n  //   console.log(comment);\n  //   fetch(\"http://localhost:3000\", {\n  //     method: \"post\",\n  //     body: JSON.stringify(this.state.comment)\n  //   })\n  //     .then(res => res.json())\n  //     .then(res => {\n  //       if (res.error) {\n  //         this.setState({ loading: false, error: res.error });\n  //       } else {\n  //         // add time return from api and push comment to parent state\n  //         this.state.comment.time = res.time;\n  //         this.props.addComment(this.state.comment);\n  //         // clear the message box\n  //         this.setState({\n  //           loading: false,\n  //           comment: { ...this.state.comment, message: \"\" }\n  //         });\n  //       }\n  //     })\n  //     .catch(err => {\n  //       this.setState({\n  //         error: \"Something went wrong while submitting form.\",\n  //         loading: false\n  //       });\n  //     });\n  // }\n\n  isFormValid() {\n    return this.state.comment.name !== \"\" && this.state.comment.message !== \"\";\n  }\n  \n\n  renderError() {\n    return this.state.error ? (\n      <div className=\"alert alert-danger\">{this.state.error}</div>\n    ) : null;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n{/*     \n        <form > */}\n        \n          <Form method=\"post\" onSubmit={this.onSubmit}>\n          <Avatar aria-label=\"recipe\" className=\"avatar\">\n            R\n          </Avatar>\n          <div className=\"form-group\">\n            <input\n              onChange={this.handleFieldChange}\n              value={this.state.comment.name}\n              className=\"form-control\"\n              placeholder=\"😎 Your Name\"\n              name=\"name\"\n              type=\"text\"\n            />\n          </div>\n         <Form.TextArea  onChange={this.handleFieldChange}\n              value={this.state.comment.message}  name=\"message\" placeholder=\"Add a public comment\"/>\n          {this.renderError()}\n\n         {btnOn?( <div className=\"commentBTN\">\n            <Form.Button primary >\n              Comment\n            </Form.Button> \n          </div>):null}\n          </Form>\n        {/* </form> */}\n      </React.Fragment>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}