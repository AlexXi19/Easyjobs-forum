{"ast":null,"code":"import LazyWrapper from './_LazyWrapper.js';\nimport getData from './_getData.js';\nimport getFuncName from './_getFuncName.js';\nimport lodash from './wrapperLodash.js';\n/**\r\n * Checks if `func` has a lazy counterpart.\r\n *\r\n * @private\r\n * @param {Function} func The function to check.\r\n * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\r\n *  else `false`.\r\n */\n\nfunction isLaziable(func) {\n  var funcName = getFuncName(func),\n      other = lodash[funcName];\n\n  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n    return false;\n  }\n\n  if (func === other) {\n    return true;\n  }\n\n  var data = getData(other);\n  return !!data && func === data[0];\n}\n\nexport default isLaziable;","map":{"version":3,"sources":["C:/Users/xuebi/Desktop/EasyJobs/react/node_modules/lodash-es/_isLaziable.js"],"names":["LazyWrapper","getData","getFuncName","lodash","isLaziable","func","funcName","other","prototype","data"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,MAAIC,QAAQ,GAAGJ,WAAW,CAACG,IAAD,CAA1B;AAAA,MACIE,KAAK,GAAGJ,MAAM,CAACG,QAAD,CADlB;;AAGA,MAAI,OAAOC,KAAP,IAAgB,UAAhB,IAA8B,EAAED,QAAQ,IAAIN,WAAW,CAACQ,SAA1B,CAAlC,EAAwE;AACtE,WAAO,KAAP;AACD;;AACD,MAAIH,IAAI,KAAKE,KAAb,EAAoB;AAClB,WAAO,IAAP;AACD;;AACD,MAAIE,IAAI,GAAGR,OAAO,CAACM,KAAD,CAAlB;AACA,SAAO,CAAC,CAACE,IAAF,IAAUJ,IAAI,KAAKI,IAAI,CAAC,CAAD,CAA9B;AACD;;AAED,eAAeL,UAAf","sourcesContent":["import LazyWrapper from './_LazyWrapper.js';\r\nimport getData from './_getData.js';\r\nimport getFuncName from './_getFuncName.js';\r\nimport lodash from './wrapperLodash.js';\r\n\r\n/**\r\n * Checks if `func` has a lazy counterpart.\r\n *\r\n * @private\r\n * @param {Function} func The function to check.\r\n * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\r\n *  else `false`.\r\n */\r\nfunction isLaziable(func) {\r\n  var funcName = getFuncName(func),\r\n      other = lodash[funcName];\r\n\r\n  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\r\n    return false;\r\n  }\r\n  if (func === other) {\r\n    return true;\r\n  }\r\n  var data = getData(other);\r\n  return !!data && func === data[0];\r\n}\r\n\r\nexport default isLaziable;\r\n"]},"metadata":{},"sourceType":"module"}