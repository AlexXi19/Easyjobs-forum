{"ast":null,"code":"import _objectSpread from\"/Users/Kevin/Desktop/Platform/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{AddComment,FormatListNumbered}from\"@material-ui/icons\";import React,{Component,useState}from\"react\";import{Form,Image,TextArea,Button,Comment}from\"semantic-ui-react\";import Avatar from'@material-ui/core/Avatar';var btnOn=false;export default class CommentForm extends Component{constructor(props){super(props);this.handleFieldChange=event=>{function uniqueID(){return Math.floor(Math.random()*Date.now());}const _event$target=event.target,value=_event$target.value,name=_event$target.name;btnOn=true;this.setState(_objectSpread(_objectSpread({},this.state),{},{comment:_objectSpread(_objectSpread({},this.state.comment),{},{id:uniqueID(),[name]:value,name:\"Kevin Wu\",reply:[]})}));};this.state={error:\"\",comment:{id:0,name:\"\",message:\"\",reply:[]}};// bind context to methods\nthis.handleFieldChange=this.handleFieldChange.bind(this);this.onSubmit=this.onSubmit.bind(this);}/**\n   * Handle form input field changes & update the state\n   */ /**\n   * Form submit handler\n   */onSubmit(e){e.preventDefault();if(!this.isFormValid()){this.setState({error:\"All fields are required.\"});return;}this.props.addComment(this.state.comment);this.setState({comment:_objectSpread(_objectSpread({},this.state.comment),{},{name:\"\",message:\"\",reply:\"\"})});}// loading status and clear error\n// this.setState({ error: \"\", loading: true });\n// persist the comments on server\n//   let { comment } = this.state;\n//   console.log(comment);\n//   fetch(\"http://localhost:3000\", {\n//     method: \"post\",\n//     body: JSON.stringify(this.state.comment)\n//   })\n//     .then(res => res.json())\n//     .then(res => {\n//       if (res.error) {\n//         this.setState({ loading: false, error: res.error });\n//       } else {\n//         // add time return from api and push comment to parent state\n//         this.state.comment.time = res.time;\n//         this.props.addComment(this.state.comment);\n//         // clear the message box\n//         this.setState({\n//           loading: false,\n//           comment: { ...this.state.comment, message: \"\" }\n//         });\n//       }\n//     })\n//     .catch(err => {\n//       this.setState({\n//         error: \"Something went wrong while submitting form.\",\n//         loading: false\n//       });\n//     });\n// }\nisFormValid(){return this.state.comment.name!==\"\"&&this.state.comment.message!==\"\";}renderError(){return this.state.error?/*#__PURE__*/React.createElement(\"div\",{className:\"alert alert-danger\"},this.state.error):null;}render(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Form,{method:\"post\",onSubmit:this.onSubmit},/*#__PURE__*/React.createElement(Avatar,{src:\"https://picsum.photos/700\",\"aria-label\":\"recipe\",className:\"avatar\"},\"R\"),/*#__PURE__*/React.createElement(Comment.Author,{className:\"commentName\",as:\"a\"},\"Kevin Wu\"),/*#__PURE__*/React.createElement(Form.TextArea,{onChange:this.handleFieldChange,value:this.state.comment.message,name:\"message\",placeholder:\"Add a public comment\"}),this.renderError(),btnOn?/*#__PURE__*/React.createElement(\"div\",{className:\"commentBTN\"},/*#__PURE__*/React.createElement(Button,{primary:true},\"Comment\")):null));}}","map":{"version":3,"sources":["/Users/Kevin/Desktop/Platform/react/src/components/CommentForm.js"],"names":["AddComment","FormatListNumbered","React","Component","useState","Form","Image","TextArea","Button","Comment","Avatar","btnOn","CommentForm","constructor","props","handleFieldChange","event","uniqueID","Math","floor","random","Date","now","target","value","name","setState","state","comment","id","reply","error","message","bind","onSubmit","e","preventDefault","isFormValid","addComment","renderError","render"],"mappings":"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","sourcesContent":["import { AddComment, FormatListNumbered } from \"@material-ui/icons\";\nimport React, { Component,useState} from \"react\";\nimport {Form,Image,TextArea,Button,Comment} from \"semantic-ui-react\";\nimport Avatar from '@material-ui/core/Avatar';\n\n\n\nvar btnOn=false;\n\nexport default class CommentForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: \"\",\n\n      comment: {\n        id:0,\n        name: \"\",\n        message: \"\",\n        reply:[]\n      }\n    };\n\n    // bind context to methods\n    this.handleFieldChange = this.handleFieldChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Handle form input field changes & update the state\n   */\n  \n  handleFieldChange = event => {\n    function uniqueID() {\n      return Math.floor(Math.random() * Date.now())\n      }\n    const { value, name } = event.target;\n    btnOn=true;\n    this.setState({\n      ...this.state,\n      comment: {\n        ...this.state.comment,\n        id:uniqueID(),\n        [name]: value,\n        name:\"Kevin Wu\",\n        reply:[]\n      }\n    });\n  };\n\n  /**\n   * Form submit handler\n   */\n  onSubmit(e) {\n    e.preventDefault();\n\n    if (!this.isFormValid()) {\n      this.setState({ error: \"All fields are required.\" });\n      return;\n    }\n    this.props.addComment(this.state.comment);\n             this.setState({\n            comment: { ...this.state.comment,name:\"\", message: \"\",reply:\"\" }\n          });\n  }\n\n    // loading status and clear error\n    // this.setState({ error: \"\", loading: true });\n\n    // persist the comments on server\n  //   let { comment } = this.state;\n  //   console.log(comment);\n  //   fetch(\"http://localhost:3000\", {\n  //     method: \"post\",\n  //     body: JSON.stringify(this.state.comment)\n  //   })\n  //     .then(res => res.json())\n  //     .then(res => {\n  //       if (res.error) {\n  //         this.setState({ loading: false, error: res.error });\n  //       } else {\n  //         // add time return from api and push comment to parent state\n  //         this.state.comment.time = res.time;\n  //         this.props.addComment(this.state.comment);\n  //         // clear the message box\n  //         this.setState({\n  //           loading: false,\n  //           comment: { ...this.state.comment, message: \"\" }\n  //         });\n  //       }\n  //     })\n  //     .catch(err => {\n  //       this.setState({\n  //         error: \"Something went wrong while submitting form.\",\n  //         loading: false\n  //       });\n  //     });\n  // }\n\n  isFormValid() {\n    return this.state.comment.name !== \"\" && this.state.comment.message !== \"\";\n  }\n  \n\n  renderError() {\n    return this.state.error ? (\n      <div className=\"alert alert-danger\">{this.state.error}</div>\n    ) : null;\n  }\n\n  render() {\n    return (\n      <div>\n      \n          <Form method=\"post\" onSubmit={this.onSubmit}>\n          <Avatar src=\"https://picsum.photos/700\" aria-label=\"recipe\" className=\"avatar\">\n            R\n          </Avatar>\n          <Comment.Author className=\"commentName\" as='a'>Kevin Wu</Comment.Author>\n          {/* <div className=\"form-group\">\n            <input\n              onChange={this.handleFieldChange}\n              value={this.state.comment.name}\n              className=\"form-control\"\n              placeholder=\"ðŸ˜Ž Your Name\"\n              name=\"name\"\n              type=\"text\"\n            />\n          </div> */}\n         <Form.TextArea  onChange={this.handleFieldChange}\n              value={this.state.comment.message}  name=\"message\" placeholder=\"Add a public comment\"/>\n          {this.renderError()}\n\n         {btnOn?( <div className=\"commentBTN\">\n            <Button primary >\n              Comment\n            </Button> \n          </div>):null}\n          </Form>\n     \n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}