{"ast":null,"code":"import PropTypes from 'prop-types';\nimport React, { useContext } from 'react';\nimport DropdownContext from './DropdownContext';\n\nvar noop = function noop() {};\n/**\r\n * Wires up Dropdown toggle functionality, returning a set a props to attach\r\n * to the element that functions as the dropdown toggle (generally a button).\r\n *\r\n * @memberOf Dropdown\r\n */\n\n\nexport function useDropdownToggle() {\n  var _ref = useContext(DropdownContext) || {},\n      _ref$show = _ref.show,\n      show = _ref$show === void 0 ? false : _ref$show,\n      _ref$toggle = _ref.toggle,\n      toggle = _ref$toggle === void 0 ? noop : _ref$toggle,\n      setToggle = _ref.setToggle;\n\n  return [{\n    ref: setToggle || noop,\n    'aria-haspopup': true,\n    'aria-expanded': !!show\n  }, {\n    show: show,\n    toggle: toggle\n  }];\n}\nvar propTypes = {\n  /**\r\n   * A render prop that returns a Toggle element. The `props`\r\n   * argument should spread through to **a component that can accept a ref**. Use\r\n   * the `onToggle` argument to toggle the menu open or closed\r\n   *\r\n   * @type {Function ({\r\n   *   show: boolean,\r\n   *   toggle: (show: boolean) => void,\r\n   *   props: {\r\n   *     ref: (?HTMLElement) => void,\r\n   *     aria-haspopup: true\r\n   *     aria-expanded: boolean\r\n   *   },\r\n   * }) => React.Element}\r\n   */\n  children: PropTypes.func.isRequired\n};\n/**\r\n * Also exported as `<Dropdown.Toggle>` from `Dropdown`.\r\n *\r\n * @displayName DropdownToggle\r\n * @memberOf Dropdown\r\n */\n\nfunction DropdownToggle(_ref2) {\n  var children = _ref2.children;\n\n  var _useDropdownToggle = useDropdownToggle(),\n      props = _useDropdownToggle[0],\n      _useDropdownToggle$ = _useDropdownToggle[1],\n      show = _useDropdownToggle$.show,\n      toggle = _useDropdownToggle$.toggle;\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children({\n    show: show,\n    toggle: toggle,\n    props: props\n  }));\n}\n\nDropdownToggle.displayName = 'ReactOverlaysDropdownToggle';\nDropdownToggle.propTypes = propTypes;\n/** @component */\n\nexport default DropdownToggle;","map":{"version":3,"sources":["C:/Users/xuebi/Desktop/EasyJobs/react/node_modules/react-overlays/esm/DropdownToggle.js"],"names":["PropTypes","React","useContext","DropdownContext","noop","useDropdownToggle","_ref","_ref$show","show","_ref$toggle","toggle","setToggle","ref","propTypes","children","func","isRequired","DropdownToggle","_ref2","_useDropdownToggle","props","_useDropdownToggle$","createElement","Fragment","displayName"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,IAAIC,IAAI,GAAG,SAASA,IAAT,GAAgB,CAAE,CAA7B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASC,iBAAT,GAA6B;AAClC,MAAIC,IAAI,GAAGJ,UAAU,CAACC,eAAD,CAAV,IAA+B,EAA1C;AAAA,MACII,SAAS,GAAGD,IAAI,CAACE,IADrB;AAAA,MAEIA,IAAI,GAAGD,SAAS,KAAK,KAAK,CAAnB,GAAuB,KAAvB,GAA+BA,SAF1C;AAAA,MAGIE,WAAW,GAAGH,IAAI,CAACI,MAHvB;AAAA,MAIIA,MAAM,GAAGD,WAAW,KAAK,KAAK,CAArB,GAAyBL,IAAzB,GAAgCK,WAJ7C;AAAA,MAKIE,SAAS,GAAGL,IAAI,CAACK,SALrB;;AAOA,SAAO,CAAC;AACNC,IAAAA,GAAG,EAAED,SAAS,IAAIP,IADZ;AAEN,qBAAiB,IAFX;AAGN,qBAAiB,CAAC,CAACI;AAHb,GAAD,EAIJ;AACDA,IAAAA,IAAI,EAAEA,IADL;AAEDE,IAAAA,MAAM,EAAEA;AAFP,GAJI,CAAP;AAQD;AACD,IAAIG,SAAS,GAAG;AACd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,QAAQ,EAAEd,SAAS,CAACe,IAAV,CAAeC;AAhBX,CAAhB;AAmBA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,MAAIJ,QAAQ,GAAGI,KAAK,CAACJ,QAArB;;AAEA,MAAIK,kBAAkB,GAAGd,iBAAiB,EAA1C;AAAA,MACIe,KAAK,GAAGD,kBAAkB,CAAC,CAAD,CAD9B;AAAA,MAEIE,mBAAmB,GAAGF,kBAAkB,CAAC,CAAD,CAF5C;AAAA,MAGIX,IAAI,GAAGa,mBAAmB,CAACb,IAH/B;AAAA,MAIIE,MAAM,GAAGW,mBAAmB,CAACX,MAJjC;;AAMA,SAAO,aAAaT,KAAK,CAACqB,aAAN,CAAoBrB,KAAK,CAACsB,QAA1B,EAAoC,IAApC,EAA0CT,QAAQ,CAAC;AACrEN,IAAAA,IAAI,EAAEA,IAD+D;AAErEE,IAAAA,MAAM,EAAEA,MAF6D;AAGrEU,IAAAA,KAAK,EAAEA;AAH8D,GAAD,CAAlD,CAApB;AAKD;;AAEDH,cAAc,CAACO,WAAf,GAA6B,6BAA7B;AACAP,cAAc,CAACJ,SAAf,GAA2BA,SAA3B;AACA;;AAEA,eAAeI,cAAf","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, { useContext } from 'react';\r\nimport DropdownContext from './DropdownContext';\r\n\r\nvar noop = function noop() {};\r\n/**\r\n * Wires up Dropdown toggle functionality, returning a set a props to attach\r\n * to the element that functions as the dropdown toggle (generally a button).\r\n *\r\n * @memberOf Dropdown\r\n */\r\n\r\n\r\nexport function useDropdownToggle() {\r\n  var _ref = useContext(DropdownContext) || {},\r\n      _ref$show = _ref.show,\r\n      show = _ref$show === void 0 ? false : _ref$show,\r\n      _ref$toggle = _ref.toggle,\r\n      toggle = _ref$toggle === void 0 ? noop : _ref$toggle,\r\n      setToggle = _ref.setToggle;\r\n\r\n  return [{\r\n    ref: setToggle || noop,\r\n    'aria-haspopup': true,\r\n    'aria-expanded': !!show\r\n  }, {\r\n    show: show,\r\n    toggle: toggle\r\n  }];\r\n}\r\nvar propTypes = {\r\n  /**\r\n   * A render prop that returns a Toggle element. The `props`\r\n   * argument should spread through to **a component that can accept a ref**. Use\r\n   * the `onToggle` argument to toggle the menu open or closed\r\n   *\r\n   * @type {Function ({\r\n   *   show: boolean,\r\n   *   toggle: (show: boolean) => void,\r\n   *   props: {\r\n   *     ref: (?HTMLElement) => void,\r\n   *     aria-haspopup: true\r\n   *     aria-expanded: boolean\r\n   *   },\r\n   * }) => React.Element}\r\n   */\r\n  children: PropTypes.func.isRequired\r\n};\r\n\r\n/**\r\n * Also exported as `<Dropdown.Toggle>` from `Dropdown`.\r\n *\r\n * @displayName DropdownToggle\r\n * @memberOf Dropdown\r\n */\r\nfunction DropdownToggle(_ref2) {\r\n  var children = _ref2.children;\r\n\r\n  var _useDropdownToggle = useDropdownToggle(),\r\n      props = _useDropdownToggle[0],\r\n      _useDropdownToggle$ = _useDropdownToggle[1],\r\n      show = _useDropdownToggle$.show,\r\n      toggle = _useDropdownToggle$.toggle;\r\n\r\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children({\r\n    show: show,\r\n    toggle: toggle,\r\n    props: props\r\n  }));\r\n}\r\n\r\nDropdownToggle.displayName = 'ReactOverlaysDropdownToggle';\r\nDropdownToggle.propTypes = propTypes;\r\n/** @component */\r\n\r\nexport default DropdownToggle;"]},"metadata":{},"sourceType":"module"}