{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { createHTMLImage, getElementType, getUnhandledProps, htmlImageProps, partitionHTMLProps } from '../../lib';\n/**\r\n * A comment can contain an image or avatar.\r\n */\n\nfunction CommentAvatar(props) {\n  var className = props.className,\n      src = props.src;\n  var classes = cx('avatar', className);\n  var rest = getUnhandledProps(CommentAvatar, props);\n\n  var _partitionHTMLProps = partitionHTMLProps(rest, {\n    htmlProps: htmlImageProps\n  }),\n      imageProps = _partitionHTMLProps[0],\n      rootProps = _partitionHTMLProps[1];\n\n  var ElementType = getElementType(CommentAvatar, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rootProps, {\n    className: classes\n  }), createHTMLImage(src, {\n    autoGenerateKey: false,\n    defaultProps: imageProps\n  }));\n}\n\nCommentAvatar.handledProps = [\"as\", \"className\", \"src\"];\nCommentAvatar.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Specifies the URL of the image. */\n  src: PropTypes.string\n} : {};\nexport default CommentAvatar;","map":{"version":3,"sources":["C:/Users/xuebi/Desktop/EasyJobs/react/node_modules/semantic-ui-react/dist/es/views/Comment/CommentAvatar.js"],"names":["_extends","cx","PropTypes","React","createHTMLImage","getElementType","getUnhandledProps","htmlImageProps","partitionHTMLProps","CommentAvatar","props","className","src","classes","rest","_partitionHTMLProps","htmlProps","imageProps","rootProps","ElementType","createElement","autoGenerateKey","defaultProps","handledProps","propTypes","process","env","NODE_ENV","as","elementType","string"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,EAAP,MAAe,MAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,iBAA1C,EAA6DC,cAA7D,EAA6EC,kBAA7E,QAAuG,WAAvG;AACA;AACA;AACA;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,MAAIC,SAAS,GAAGD,KAAK,CAACC,SAAtB;AAAA,MACIC,GAAG,GAAGF,KAAK,CAACE,GADhB;AAEA,MAAIC,OAAO,GAAGZ,EAAE,CAAC,QAAD,EAAWU,SAAX,CAAhB;AACA,MAAIG,IAAI,GAAGR,iBAAiB,CAACG,aAAD,EAAgBC,KAAhB,CAA5B;;AAEA,MAAIK,mBAAmB,GAAGP,kBAAkB,CAACM,IAAD,EAAO;AACjDE,IAAAA,SAAS,EAAET;AADsC,GAAP,CAA5C;AAAA,MAGIU,UAAU,GAAGF,mBAAmB,CAAC,CAAD,CAHpC;AAAA,MAIIG,SAAS,GAAGH,mBAAmB,CAAC,CAAD,CAJnC;;AAMA,MAAII,WAAW,GAAGd,cAAc,CAACI,aAAD,EAAgBC,KAAhB,CAAhC;AACA,SAAO,aAAaP,KAAK,CAACiB,aAAN,CAAoBD,WAApB,EAAiCnB,QAAQ,CAAC,EAAD,EAAKkB,SAAL,EAAgB;AAC3EP,IAAAA,SAAS,EAAEE;AADgE,GAAhB,CAAzC,EAEhBT,eAAe,CAACQ,GAAD,EAAM;AACvBS,IAAAA,eAAe,EAAE,KADM;AAEvBC,IAAAA,YAAY,EAAEL;AAFS,GAAN,CAFC,CAApB;AAMD;;AAEDR,aAAa,CAACc,YAAd,GAA6B,CAAC,IAAD,EAAO,WAAP,EAAoB,KAApB,CAA7B;AACAd,aAAa,CAACe,SAAd,GAA0BC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAChE;AACAC,EAAAA,EAAE,EAAE1B,SAAS,CAAC2B,WAFkD;;AAIhE;AACAlB,EAAAA,SAAS,EAAET,SAAS,CAAC4B,MAL2C;;AAOhE;AACAlB,EAAAA,GAAG,EAAEV,SAAS,CAAC4B;AARiD,CAAxC,GAStB,EATJ;AAUA,eAAerB,aAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport cx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { createHTMLImage, getElementType, getUnhandledProps, htmlImageProps, partitionHTMLProps } from '../../lib';\r\n/**\r\n * A comment can contain an image or avatar.\r\n */\r\n\r\nfunction CommentAvatar(props) {\r\n  var className = props.className,\r\n      src = props.src;\r\n  var classes = cx('avatar', className);\r\n  var rest = getUnhandledProps(CommentAvatar, props);\r\n\r\n  var _partitionHTMLProps = partitionHTMLProps(rest, {\r\n    htmlProps: htmlImageProps\r\n  }),\r\n      imageProps = _partitionHTMLProps[0],\r\n      rootProps = _partitionHTMLProps[1];\r\n\r\n  var ElementType = getElementType(CommentAvatar, props);\r\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rootProps, {\r\n    className: classes\r\n  }), createHTMLImage(src, {\r\n    autoGenerateKey: false,\r\n    defaultProps: imageProps\r\n  }));\r\n}\r\n\r\nCommentAvatar.handledProps = [\"as\", \"className\", \"src\"];\r\nCommentAvatar.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: PropTypes.elementType,\r\n\r\n  /** Additional classes. */\r\n  className: PropTypes.string,\r\n\r\n  /** Specifies the URL of the image. */\r\n  src: PropTypes.string\r\n} : {};\r\nexport default CommentAvatar;"]},"metadata":{},"sourceType":"module"}