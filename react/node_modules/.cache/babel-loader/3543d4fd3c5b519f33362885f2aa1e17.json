{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\r\n * A content sub-component for Accordion component.\r\n */\n\nfunction AccordionContent(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', useKeyOnly(active, 'active'), className);\n  var rest = getUnhandledProps(AccordionContent, props);\n  var ElementType = getElementType(AccordionContent, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nAccordionContent.handledProps = [\"active\", \"as\", \"children\", \"className\", \"content\"];\nAccordionContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Whether or not the content is visible. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nAccordionContent.create = createShorthandFactory(AccordionContent, function (content) {\n  return {\n    content: content\n  };\n});\nexport default AccordionContent;","map":{"version":3,"sources":["C:/Users/xuebi/Desktop/EasyJobs/react/node_modules/semantic-ui-react/dist/es/modules/Accordion/AccordionContent.js"],"names":["_extends","cx","PropTypes","React","childrenUtils","createShorthandFactory","customPropTypes","getElementType","getUnhandledProps","useKeyOnly","AccordionContent","props","active","children","className","content","classes","rest","ElementType","createElement","isNil","handledProps","propTypes","process","env","NODE_ENV","as","elementType","bool","node","string","contentShorthand","create"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,EAAP,MAAe,MAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,sBAAxB,EAAgDC,eAAhD,EAAiEC,cAAjE,EAAiFC,iBAAjF,EAAoGC,UAApG,QAAsH,WAAtH;AACA;AACA;AACA;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,MAAIC,MAAM,GAAGD,KAAK,CAACC,MAAnB;AAAA,MACIC,QAAQ,GAAGF,KAAK,CAACE,QADrB;AAAA,MAEIC,SAAS,GAAGH,KAAK,CAACG,SAFtB;AAAA,MAGIC,OAAO,GAAGJ,KAAK,CAACI,OAHpB;AAIA,MAAIC,OAAO,GAAGf,EAAE,CAAC,SAAD,EAAYQ,UAAU,CAACG,MAAD,EAAS,QAAT,CAAtB,EAA0CE,SAA1C,CAAhB;AACA,MAAIG,IAAI,GAAGT,iBAAiB,CAACE,gBAAD,EAAmBC,KAAnB,CAA5B;AACA,MAAIO,WAAW,GAAGX,cAAc,CAACG,gBAAD,EAAmBC,KAAnB,CAAhC;AACA,SAAO,aAAaR,KAAK,CAACgB,aAAN,CAAoBD,WAApB,EAAiClB,QAAQ,CAAC,EAAD,EAAKiB,IAAL,EAAW;AACtEH,IAAAA,SAAS,EAAEE;AAD2D,GAAX,CAAzC,EAEhBZ,aAAa,CAACgB,KAAd,CAAoBP,QAApB,IAAgCE,OAAhC,GAA0CF,QAF1B,CAApB;AAGD;;AAEDH,gBAAgB,CAACW,YAAjB,GAAgC,CAAC,QAAD,EAAW,IAAX,EAAiB,UAAjB,EAA6B,WAA7B,EAA0C,SAA1C,CAAhC;AACAX,gBAAgB,CAACY,SAAjB,GAA6BC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AACnE;AACAC,EAAAA,EAAE,EAAExB,SAAS,CAACyB,WAFqD;;AAInE;AACAf,EAAAA,MAAM,EAAEV,SAAS,CAAC0B,IALiD;;AAOnE;AACAf,EAAAA,QAAQ,EAAEX,SAAS,CAAC2B,IAR+C;;AAUnE;AACAf,EAAAA,SAAS,EAAEZ,SAAS,CAAC4B,MAX8C;;AAanE;AACAf,EAAAA,OAAO,EAAET,eAAe,CAACyB;AAd0C,CAAxC,GAezB,EAfJ;AAgBArB,gBAAgB,CAACsB,MAAjB,GAA0B3B,sBAAsB,CAACK,gBAAD,EAAmB,UAAUK,OAAV,EAAmB;AACpF,SAAO;AACLA,IAAAA,OAAO,EAAEA;AADJ,GAAP;AAGD,CAJ+C,CAAhD;AAKA,eAAeL,gBAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport cx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\r\n/**\r\n * A content sub-component for Accordion component.\r\n */\r\n\r\nfunction AccordionContent(props) {\r\n  var active = props.active,\r\n      children = props.children,\r\n      className = props.className,\r\n      content = props.content;\r\n  var classes = cx('content', useKeyOnly(active, 'active'), className);\r\n  var rest = getUnhandledProps(AccordionContent, props);\r\n  var ElementType = getElementType(AccordionContent, props);\r\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\r\n    className: classes\r\n  }), childrenUtils.isNil(children) ? content : children);\r\n}\r\n\r\nAccordionContent.handledProps = [\"active\", \"as\", \"children\", \"className\", \"content\"];\r\nAccordionContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: PropTypes.elementType,\r\n\r\n  /** Whether or not the content is visible. */\r\n  active: PropTypes.bool,\r\n\r\n  /** Primary content. */\r\n  children: PropTypes.node,\r\n\r\n  /** Additional classes. */\r\n  className: PropTypes.string,\r\n\r\n  /** Shorthand for primary content. */\r\n  content: customPropTypes.contentShorthand\r\n} : {};\r\nAccordionContent.create = createShorthandFactory(AccordionContent, function (content) {\r\n  return {\r\n    content: content\r\n  };\r\n});\r\nexport default AccordionContent;"]},"metadata":{},"sourceType":"module"}