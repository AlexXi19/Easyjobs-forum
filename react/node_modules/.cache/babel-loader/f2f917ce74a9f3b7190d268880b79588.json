{"ast":null,"code":"/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n/**\r\n * This function is like `composeArgs` except that the arguments composition\r\n * is tailored for `_.partialRight`.\r\n *\r\n * @private\r\n * @param {Array} args The provided arguments.\r\n * @param {Array} partials The arguments to append to those provided.\r\n * @param {Array} holders The `partials` placeholder indexes.\r\n * @params {boolean} [isCurried] Specify composing for a curried function.\r\n * @returns {Array} Returns the new array of composed arguments.\r\n */\n\nfunction composeArgsRight(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersIndex = -1,\n      holdersLength = holders.length,\n      rightIndex = -1,\n      rightLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(rangeLength + rightLength),\n      isUncurried = !isCurried;\n\n  while (++argsIndex < rangeLength) {\n    result[argsIndex] = args[argsIndex];\n  }\n\n  var offset = argsIndex;\n\n  while (++rightIndex < rightLength) {\n    result[offset + rightIndex] = partials[rightIndex];\n  }\n\n  while (++holdersIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[offset + holders[holdersIndex]] = args[argsIndex++];\n    }\n  }\n\n  return result;\n}\n\nexport default composeArgsRight;","map":{"version":3,"sources":["C:/Users/xuebi/Desktop/EasyJobs/react/node_modules/lodash-es/_composeArgsRight.js"],"names":["nativeMax","Math","max","composeArgsRight","args","partials","holders","isCurried","argsIndex","argsLength","length","holdersIndex","holdersLength","rightIndex","rightLength","rangeLength","result","Array","isUncurried","offset"],"mappings":"AAAA;AACA,IAAIA,SAAS,GAAGC,IAAI,CAACC,GAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,QAAhC,EAA0CC,OAA1C,EAAmDC,SAAnD,EAA8D;AAC5D,MAAIC,SAAS,GAAG,CAAC,CAAjB;AAAA,MACIC,UAAU,GAAGL,IAAI,CAACM,MADtB;AAAA,MAEIC,YAAY,GAAG,CAAC,CAFpB;AAAA,MAGIC,aAAa,GAAGN,OAAO,CAACI,MAH5B;AAAA,MAIIG,UAAU,GAAG,CAAC,CAJlB;AAAA,MAKIC,WAAW,GAAGT,QAAQ,CAACK,MAL3B;AAAA,MAMIK,WAAW,GAAGf,SAAS,CAACS,UAAU,GAAGG,aAAd,EAA6B,CAA7B,CAN3B;AAAA,MAOII,MAAM,GAAGC,KAAK,CAACF,WAAW,GAAGD,WAAf,CAPlB;AAAA,MAQII,WAAW,GAAG,CAACX,SARnB;;AAUA,SAAO,EAAEC,SAAF,GAAcO,WAArB,EAAkC;AAChCC,IAAAA,MAAM,CAACR,SAAD,CAAN,GAAoBJ,IAAI,CAACI,SAAD,CAAxB;AACD;;AACD,MAAIW,MAAM,GAAGX,SAAb;;AACA,SAAO,EAAEK,UAAF,GAAeC,WAAtB,EAAmC;AACjCE,IAAAA,MAAM,CAACG,MAAM,GAAGN,UAAV,CAAN,GAA8BR,QAAQ,CAACQ,UAAD,CAAtC;AACD;;AACD,SAAO,EAAEF,YAAF,GAAiBC,aAAxB,EAAuC;AACrC,QAAIM,WAAW,IAAIV,SAAS,GAAGC,UAA/B,EAA2C;AACzCO,MAAAA,MAAM,CAACG,MAAM,GAAGb,OAAO,CAACK,YAAD,CAAjB,CAAN,GAAyCP,IAAI,CAACI,SAAS,EAAV,CAA7C;AACD;AACF;;AACD,SAAOQ,MAAP;AACD;;AAED,eAAeb,gBAAf","sourcesContent":["/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeMax = Math.max;\r\n\r\n/**\r\n * This function is like `composeArgs` except that the arguments composition\r\n * is tailored for `_.partialRight`.\r\n *\r\n * @private\r\n * @param {Array} args The provided arguments.\r\n * @param {Array} partials The arguments to append to those provided.\r\n * @param {Array} holders The `partials` placeholder indexes.\r\n * @params {boolean} [isCurried] Specify composing for a curried function.\r\n * @returns {Array} Returns the new array of composed arguments.\r\n */\r\nfunction composeArgsRight(args, partials, holders, isCurried) {\r\n  var argsIndex = -1,\r\n      argsLength = args.length,\r\n      holdersIndex = -1,\r\n      holdersLength = holders.length,\r\n      rightIndex = -1,\r\n      rightLength = partials.length,\r\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\r\n      result = Array(rangeLength + rightLength),\r\n      isUncurried = !isCurried;\r\n\r\n  while (++argsIndex < rangeLength) {\r\n    result[argsIndex] = args[argsIndex];\r\n  }\r\n  var offset = argsIndex;\r\n  while (++rightIndex < rightLength) {\r\n    result[offset + rightIndex] = partials[rightIndex];\r\n  }\r\n  while (++holdersIndex < holdersLength) {\r\n    if (isUncurried || argsIndex < argsLength) {\r\n      result[offset + holders[holdersIndex]] = args[argsIndex++];\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nexport default composeArgsRight;\r\n"]},"metadata":{},"sourceType":"module"}