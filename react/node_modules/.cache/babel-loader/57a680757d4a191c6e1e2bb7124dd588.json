{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getElementType, getUnhandledProps } from '../../lib';\n/**\r\n * Button groups can contain conditionals.\r\n */\n\nfunction ButtonOr(props) {\n  var className = props.className,\n      text = props.text;\n  var classes = cx('or', className);\n  var rest = getUnhandledProps(ButtonOr, props);\n  var ElementType = getElementType(ButtonOr, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes,\n    \"data-text\": text\n  }));\n}\n\nButtonOr.handledProps = [\"as\", \"className\", \"text\"];\nButtonOr.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Or buttons can have their text localized, or adjusted by using the text prop. */\n  text: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : {};\nexport default ButtonOr;","map":{"version":3,"sources":["C:/Users/xuebi/Desktop/EasyJobs/react/node_modules/semantic-ui-react/dist/es/elements/Button/ButtonOr.js"],"names":["_extends","cx","PropTypes","React","getElementType","getUnhandledProps","ButtonOr","props","className","text","classes","rest","ElementType","createElement","handledProps","propTypes","process","env","NODE_ENV","as","elementType","string","oneOfType","number"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,EAAP,MAAe,MAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,WAAlD;AACA;AACA;AACA;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,MAAIC,SAAS,GAAGD,KAAK,CAACC,SAAtB;AAAA,MACIC,IAAI,GAAGF,KAAK,CAACE,IADjB;AAEA,MAAIC,OAAO,GAAGT,EAAE,CAAC,IAAD,EAAOO,SAAP,CAAhB;AACA,MAAIG,IAAI,GAAGN,iBAAiB,CAACC,QAAD,EAAWC,KAAX,CAA5B;AACA,MAAIK,WAAW,GAAGR,cAAc,CAACE,QAAD,EAAWC,KAAX,CAAhC;AACA,SAAO,aAAaJ,KAAK,CAACU,aAAN,CAAoBD,WAApB,EAAiCZ,QAAQ,CAAC,EAAD,EAAKW,IAAL,EAAW;AACtEH,IAAAA,SAAS,EAAEE,OAD2D;AAEtE,iBAAaD;AAFyD,GAAX,CAAzC,CAApB;AAID;;AAEDH,QAAQ,CAACQ,YAAT,GAAwB,CAAC,IAAD,EAAO,WAAP,EAAoB,MAApB,CAAxB;AACAR,QAAQ,CAACS,SAAT,GAAqBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC3D;AACAC,EAAAA,EAAE,EAAEjB,SAAS,CAACkB,WAF6C;;AAI3D;AACAZ,EAAAA,SAAS,EAAEN,SAAS,CAACmB,MALsC;;AAO3D;AACAZ,EAAAA,IAAI,EAAEP,SAAS,CAACoB,SAAV,CAAoB,CAACpB,SAAS,CAACqB,MAAX,EAAmBrB,SAAS,CAACmB,MAA7B,CAApB;AARqD,CAAxC,GASjB,EATJ;AAUA,eAAef,QAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport cx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { getElementType, getUnhandledProps } from '../../lib';\r\n/**\r\n * Button groups can contain conditionals.\r\n */\r\n\r\nfunction ButtonOr(props) {\r\n  var className = props.className,\r\n      text = props.text;\r\n  var classes = cx('or', className);\r\n  var rest = getUnhandledProps(ButtonOr, props);\r\n  var ElementType = getElementType(ButtonOr, props);\r\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\r\n    className: classes,\r\n    \"data-text\": text\r\n  }));\r\n}\r\n\r\nButtonOr.handledProps = [\"as\", \"className\", \"text\"];\r\nButtonOr.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: PropTypes.elementType,\r\n\r\n  /** Additional classes. */\r\n  className: PropTypes.string,\r\n\r\n  /** Or buttons can have their text localized, or adjusted by using the text prop. */\r\n  text: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\r\n} : {};\r\nexport default ButtonOr;"]},"metadata":{},"sourceType":"module"}