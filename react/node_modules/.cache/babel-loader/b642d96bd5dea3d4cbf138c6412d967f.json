{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI } from '../../lib';\n/**\r\n * Several icons can be used together as a group.\r\n */\n\nfunction IconGroup(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      size = props.size;\n  var classes = cx(size, 'icons', className);\n  var rest = getUnhandledProps(IconGroup, props);\n  var ElementType = getElementType(IconGroup, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nIconGroup.handledProps = [\"as\", \"children\", \"className\", \"content\", \"size\"];\nIconGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Size of the icon group. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium'))\n} : {};\nIconGroup.defaultProps = {\n  as: 'i'\n};\nexport default IconGroup;","map":{"version":3,"sources":["C:/Users/xuebi/Desktop/EasyJobs/react/node_modules/semantic-ui-react/dist/es/elements/Icon/IconGroup.js"],"names":["_extends","_without","cx","PropTypes","React","childrenUtils","customPropTypes","getElementType","getUnhandledProps","SUI","IconGroup","props","children","className","content","size","classes","rest","ElementType","createElement","isNil","handledProps","propTypes","process","env","NODE_ENV","as","elementType","node","string","contentShorthand","oneOf","SIZES","defaultProps"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,EAAP,MAAe,MAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,cAAzC,EAAyDC,iBAAzD,EAA4EC,GAA5E,QAAuF,WAAvF;AACA;AACA;AACA;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;AAAA,MAEIC,OAAO,GAAGH,KAAK,CAACG,OAFpB;AAAA,MAGIC,IAAI,GAAGJ,KAAK,CAACI,IAHjB;AAIA,MAAIC,OAAO,GAAGd,EAAE,CAACa,IAAD,EAAO,OAAP,EAAgBF,SAAhB,CAAhB;AACA,MAAII,IAAI,GAAGT,iBAAiB,CAACE,SAAD,EAAYC,KAAZ,CAA5B;AACA,MAAIO,WAAW,GAAGX,cAAc,CAACG,SAAD,EAAYC,KAAZ,CAAhC;AACA,SAAO,aAAaP,KAAK,CAACe,aAAN,CAAoBD,WAApB,EAAiClB,QAAQ,CAAC,EAAD,EAAKiB,IAAL,EAAW;AACtEJ,IAAAA,SAAS,EAAEG;AAD2D,GAAX,CAAzC,EAEhBX,aAAa,CAACe,KAAd,CAAoBR,QAApB,IAAgCE,OAAhC,GAA0CF,QAF1B,CAApB;AAGD;;AAEDF,SAAS,CAACW,YAAV,GAAyB,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,SAAhC,EAA2C,MAA3C,CAAzB;AACAX,SAAS,CAACY,SAAV,GAAsBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC5D;AACAC,EAAAA,EAAE,EAAEvB,SAAS,CAACwB,WAF8C;;AAI5D;AACAf,EAAAA,QAAQ,EAAET,SAAS,CAACyB,IALwC;;AAO5D;AACAf,EAAAA,SAAS,EAAEV,SAAS,CAAC0B,MARuC;;AAU5D;AACAf,EAAAA,OAAO,EAAER,eAAe,CAACwB,gBAXmC;;AAa5D;AACAf,EAAAA,IAAI,EAAEZ,SAAS,CAAC4B,KAAV,CAAgB9B,QAAQ,CAACQ,GAAG,CAACuB,KAAL,EAAY,QAAZ,CAAxB;AAdsD,CAAxC,GAelB,EAfJ;AAgBAtB,SAAS,CAACuB,YAAV,GAAyB;AACvBP,EAAAA,EAAE,EAAE;AADmB,CAAzB;AAGA,eAAehB,SAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _without from \"lodash-es/without\";\r\nimport cx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI } from '../../lib';\r\n/**\r\n * Several icons can be used together as a group.\r\n */\r\n\r\nfunction IconGroup(props) {\r\n  var children = props.children,\r\n      className = props.className,\r\n      content = props.content,\r\n      size = props.size;\r\n  var classes = cx(size, 'icons', className);\r\n  var rest = getUnhandledProps(IconGroup, props);\r\n  var ElementType = getElementType(IconGroup, props);\r\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\r\n    className: classes\r\n  }), childrenUtils.isNil(children) ? content : children);\r\n}\r\n\r\nIconGroup.handledProps = [\"as\", \"children\", \"className\", \"content\", \"size\"];\r\nIconGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: PropTypes.elementType,\r\n\r\n  /** Primary content. */\r\n  children: PropTypes.node,\r\n\r\n  /** Additional classes. */\r\n  className: PropTypes.string,\r\n\r\n  /** Shorthand for primary content. */\r\n  content: customPropTypes.contentShorthand,\r\n\r\n  /** Size of the icon group. */\r\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium'))\r\n} : {};\r\nIconGroup.defaultProps = {\r\n  as: 'i'\r\n};\r\nexport default IconGroup;"]},"metadata":{},"sourceType":"module"}