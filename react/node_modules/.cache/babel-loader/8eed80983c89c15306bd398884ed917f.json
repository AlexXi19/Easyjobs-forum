{"ast":null,"code":"import _objectSpread from \"/Users/Kevin/Desktop/Platform/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/Kevin/Desktop/Platform/react/src/components/CommentForm.js\";\nimport { AddComment, FormatListNumbered } from \"@material-ui/icons\";\nimport React, { Component, useState } from \"react\";\nimport { Form, Image, TextArea, Button, Comment } from \"semantic-ui-react\";\nimport Avatar from '@material-ui/core/Avatar';\nvar btnOn = false;\nexport default class CommentForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleFieldChange = event => {\n      function uniqueID() {\n        return Math.floor(Math.random() * Date.now());\n      }\n\n      const _event$target = event.target,\n            value = _event$target.value,\n            name = _event$target.name;\n      btnOn = true;\n      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        comment: _objectSpread(_objectSpread({}, this.state.comment), {}, {\n          id: uniqueID(),\n          [name]: value,\n          name: \"唔铠闻\",\n          reply: []\n        })\n      }));\n    };\n\n    this.state = {\n      error: \"\",\n      comment: {\n        id: 0,\n        name: \"\",\n        message: \"\",\n        reply: []\n      }\n    }; // bind context to methods\n\n    this.handleFieldChange = this.handleFieldChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  /**\n   * Handle form input field changes & update the state\n   */\n\n\n  /**\n   * Form submit handler\n   */\n  onSubmit(e) {\n    e.preventDefault();\n\n    if (!this.isFormValid()) {\n      this.setState({\n        error: \"All fields are required.\"\n      });\n      return;\n    }\n\n    this.props.addComment(this.state.comment);\n    this.setState({\n      comment: _objectSpread(_objectSpread({}, this.state.comment), {}, {\n        name: \"\",\n        message: \"\",\n        reply: \"\"\n      })\n    });\n  } // loading status and clear error\n  // this.setState({ error: \"\", loading: true });\n  // persist the comments on server\n  //   let { comment } = this.state;\n  //   console.log(comment);\n  //   fetch(\"http://localhost:3000\", {\n  //     method: \"post\",\n  //     body: JSON.stringify(this.state.comment)\n  //   })\n  //     .then(res => res.json())\n  //     .then(res => {\n  //       if (res.error) {\n  //         this.setState({ loading: false, error: res.error });\n  //       } else {\n  //         // add time return from api and push comment to parent state\n  //         this.state.comment.time = res.time;\n  //         this.props.addComment(this.state.comment);\n  //         // clear the message box\n  //         this.setState({\n  //           loading: false,\n  //           comment: { ...this.state.comment, message: \"\" }\n  //         });\n  //       }\n  //     })\n  //     .catch(err => {\n  //       this.setState({\n  //         error: \"Something went wrong while submitting form.\",\n  //         loading: false\n  //       });\n  //     });\n  // }\n\n\n  isFormValid() {\n    return this.state.comment.name !== \"\" && this.state.comment.message !== \"\";\n  }\n\n  renderError() {\n    return this.state.error ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }\n    }, this.state.error) : null;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      method: \"post\",\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Avatar, {\n      src: \"https://picsum.photos/700\",\n      \"aria-label\": \"recipe\",\n      className: \"avatar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, \"R\"), /*#__PURE__*/React.createElement(Comment.Author, {\n      className: \"commentName\",\n      as: \"a\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }, \"\\u4F5C\\u8005\"), /*#__PURE__*/React.createElement(Form.TextArea, {\n      onChange: this.handleFieldChange,\n      value: this.state.comment.message,\n      name: \"message\",\n      placeholder: \"Add a public comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 10\n      }\n    }), this.renderError(), btnOn ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"commentBTN\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      primary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }, \"\\u8BC4\\u8BBA\")) : null));\n  }\n\n}","map":{"version":3,"sources":["/Users/Kevin/Desktop/Platform/react/src/components/CommentForm.js"],"names":["AddComment","FormatListNumbered","React","Component","useState","Form","Image","TextArea","Button","Comment","Avatar","btnOn","CommentForm","constructor","props","handleFieldChange","event","uniqueID","Math","floor","random","Date","now","target","value","name","setState","state","comment","id","reply","error","message","bind","onSubmit","e","preventDefault","isFormValid","addComment","renderError","render"],"mappings":"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","sourcesContent":["import { AddComment, FormatListNumbered } from \"@material-ui/icons\";\nimport React, { Component,useState} from \"react\";\nimport {Form,Image,TextArea,Button,Comment} from \"semantic-ui-react\";\nimport Avatar from '@material-ui/core/Avatar';\n\n\n\nvar btnOn=false;\n\nexport default class CommentForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: \"\",\n\n      comment: {\n        id:0,\n        name: \"\",\n        message: \"\",\n        reply:[]\n      }\n    };\n\n    // bind context to methods\n    this.handleFieldChange = this.handleFieldChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Handle form input field changes & update the state\n   */\n  \n  handleFieldChange = event => {\n    function uniqueID() {\n      return Math.floor(Math.random() * Date.now())\n      }\n    const { value, name } = event.target;\n    btnOn=true;\n    this.setState({\n      ...this.state,\n      comment: {\n        ...this.state.comment,\n        id:uniqueID(),\n        [name]: value,\n        name:\"唔铠闻\",\n        reply:[]\n      }\n    });\n  };\n\n  /**\n   * Form submit handler\n   */\n  onSubmit(e) {\n    e.preventDefault();\n\n    if (!this.isFormValid()) {\n      this.setState({ error: \"All fields are required.\" });\n      return;\n    }\n    this.props.addComment(this.state.comment);\n             this.setState({\n            comment: { ...this.state.comment,name:\"\", message: \"\",reply:\"\" }\n          });\n  }\n\n    // loading status and clear error\n    // this.setState({ error: \"\", loading: true });\n\n    // persist the comments on server\n  //   let { comment } = this.state;\n  //   console.log(comment);\n  //   fetch(\"http://localhost:3000\", {\n  //     method: \"post\",\n  //     body: JSON.stringify(this.state.comment)\n  //   })\n  //     .then(res => res.json())\n  //     .then(res => {\n  //       if (res.error) {\n  //         this.setState({ loading: false, error: res.error });\n  //       } else {\n  //         // add time return from api and push comment to parent state\n  //         this.state.comment.time = res.time;\n  //         this.props.addComment(this.state.comment);\n  //         // clear the message box\n  //         this.setState({\n  //           loading: false,\n  //           comment: { ...this.state.comment, message: \"\" }\n  //         });\n  //       }\n  //     })\n  //     .catch(err => {\n  //       this.setState({\n  //         error: \"Something went wrong while submitting form.\",\n  //         loading: false\n  //       });\n  //     });\n  // }\n\n  isFormValid() {\n    return this.state.comment.name !== \"\" && this.state.comment.message !== \"\";\n  }\n  \n\n  renderError() {\n    return this.state.error ? (\n      <div className=\"alert alert-danger\">{this.state.error}</div>\n    ) : null;\n  }\n\n  render() {\n    return (\n      <div>\n      \n          <Form method=\"post\" onSubmit={this.onSubmit}>\n          <Avatar src=\"https://picsum.photos/700\" aria-label=\"recipe\" className=\"avatar\">\n            R\n          </Avatar>\n          <Comment.Author className=\"commentName\" as='a'>作者</Comment.Author>\n          {/* <div className=\"form-group\">\n            <input\n              onChange={this.handleFieldChange}\n              value={this.state.comment.name}\n              className=\"form-control\"\n              placeholder=\"😎 Your Name\"\n              name=\"name\"\n              type=\"text\"\n            />\n          </div> */}\n         <Form.TextArea  onChange={this.handleFieldChange}\n              value={this.state.comment.message}  name=\"message\" placeholder=\"Add a public comment\"/>\n          {this.renderError()}\n\n         {btnOn?( <div className=\"commentBTN\">\n            <Button primary >\n              评论\n            </Button> \n          </div>):null}\n          </Form>\n     \n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}