{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\r\n * A PopupHeader displays a header in a Popover.\r\n */\n\nexport default function PopupHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('header', className);\n  var rest = getUnhandledProps(PopupHeader, props);\n  var ElementType = getElementType(PopupHeader, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\nPopupHeader.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nPopupHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nPopupHeader.create = createShorthandFactory(PopupHeader, function (children) {\n  return {\n    children: children\n  };\n});","map":{"version":3,"sources":["C:/Users/xuebi/Desktop/EasyJobs/react/node_modules/semantic-ui-react/dist/es/modules/Popup/PopupHeader.js"],"names":["_extends","cx","PropTypes","React","childrenUtils","createShorthandFactory","customPropTypes","getElementType","getUnhandledProps","PopupHeader","props","children","className","content","classes","rest","ElementType","createElement","isNil","handledProps","propTypes","process","env","NODE_ENV","as","elementType","node","string","contentShorthand","create"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,EAAP,MAAe,MAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,sBAAxB,EAAgDC,eAAhD,EAAiEC,cAAjE,EAAiFC,iBAAjF,QAA0G,WAA1G;AACA;AACA;AACA;;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACzC,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;AAAA,MAEIC,OAAO,GAAGH,KAAK,CAACG,OAFpB;AAGA,MAAIC,OAAO,GAAGb,EAAE,CAAC,QAAD,EAAWW,SAAX,CAAhB;AACA,MAAIG,IAAI,GAAGP,iBAAiB,CAACC,WAAD,EAAcC,KAAd,CAA5B;AACA,MAAIM,WAAW,GAAGT,cAAc,CAACE,WAAD,EAAcC,KAAd,CAAhC;AACA,SAAO,aAAaP,KAAK,CAACc,aAAN,CAAoBD,WAApB,EAAiChB,QAAQ,CAAC,EAAD,EAAKe,IAAL,EAAW;AACtEH,IAAAA,SAAS,EAAEE;AAD2D,GAAX,CAAzC,EAEhBV,aAAa,CAACc,KAAd,CAAoBP,QAApB,IAAgCE,OAAhC,GAA0CF,QAF1B,CAApB;AAGD;AACDF,WAAW,CAACU,YAAZ,GAA2B,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,SAAhC,CAA3B;AACAV,WAAW,CAACW,SAAZ,GAAwBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC9D;AACAC,EAAAA,EAAE,EAAEtB,SAAS,CAACuB,WAFgD;;AAI9D;AACAd,EAAAA,QAAQ,EAAET,SAAS,CAACwB,IAL0C;;AAO9D;AACAd,EAAAA,SAAS,EAAEV,SAAS,CAACyB,MARyC;;AAU9D;AACAd,EAAAA,OAAO,EAAEP,eAAe,CAACsB;AAXqC,CAAxC,GAYpB,EAZJ;AAaAnB,WAAW,CAACoB,MAAZ,GAAqBxB,sBAAsB,CAACI,WAAD,EAAc,UAAUE,QAAV,EAAoB;AAC3E,SAAO;AACLA,IAAAA,QAAQ,EAAEA;AADL,GAAP;AAGD,CAJ0C,CAA3C","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport cx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\r\n/**\r\n * A PopupHeader displays a header in a Popover.\r\n */\r\n\r\nexport default function PopupHeader(props) {\r\n  var children = props.children,\r\n      className = props.className,\r\n      content = props.content;\r\n  var classes = cx('header', className);\r\n  var rest = getUnhandledProps(PopupHeader, props);\r\n  var ElementType = getElementType(PopupHeader, props);\r\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\r\n    className: classes\r\n  }), childrenUtils.isNil(children) ? content : children);\r\n}\r\nPopupHeader.handledProps = [\"as\", \"children\", \"className\", \"content\"];\r\nPopupHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: PropTypes.elementType,\r\n\r\n  /** Primary content. */\r\n  children: PropTypes.node,\r\n\r\n  /** Additional classes. */\r\n  className: PropTypes.string,\r\n\r\n  /** Shorthand for primary content. */\r\n  content: customPropTypes.contentShorthand\r\n} : {};\r\nPopupHeader.create = createShorthandFactory(PopupHeader, function (children) {\r\n  return {\r\n    children: children\r\n  };\r\n});"]},"metadata":{},"sourceType":"module"}