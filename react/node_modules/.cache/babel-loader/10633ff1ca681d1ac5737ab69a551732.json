{"ast":null,"code":"import createCtor from './_createCtor.js';\nimport root from './_root.js';\n/** Used to compose bitmasks for function metadata. */\n\nvar WRAP_BIND_FLAG = 1;\n/**\r\n * Creates a function that wraps `func` to invoke it with the optional `this`\r\n * binding of `thisArg`.\r\n *\r\n * @private\r\n * @param {Function} func The function to wrap.\r\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n * @param {*} [thisArg] The `this` binding of `func`.\r\n * @returns {Function} Returns the new wrapped function.\r\n */\n\nfunction createBind(func, bitmask, thisArg) {\n  var isBind = bitmask & WRAP_BIND_FLAG,\n      Ctor = createCtor(func);\n\n  function wrapper() {\n    var fn = this && this !== root && this instanceof wrapper ? Ctor : func;\n    return fn.apply(isBind ? thisArg : this, arguments);\n  }\n\n  return wrapper;\n}\n\nexport default createBind;","map":{"version":3,"sources":["C:/Users/xuebi/Desktop/EasyJobs/react/node_modules/lodash-es/_createBind.js"],"names":["createCtor","root","WRAP_BIND_FLAG","createBind","func","bitmask","thisArg","isBind","Ctor","wrapper","fn","apply","arguments"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAEA;;AACA,IAAIC,cAAc,GAAG,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,OAAnC,EAA4C;AAC1C,MAAIC,MAAM,GAAGF,OAAO,GAAGH,cAAvB;AAAA,MACIM,IAAI,GAAGR,UAAU,CAACI,IAAD,CADrB;;AAGA,WAASK,OAAT,GAAmB;AACjB,QAAIC,EAAE,GAAI,QAAQ,SAAST,IAAjB,IAAyB,gBAAgBQ,OAA1C,GAAqDD,IAArD,GAA4DJ,IAArE;AACA,WAAOM,EAAE,CAACC,KAAH,CAASJ,MAAM,GAAGD,OAAH,GAAa,IAA5B,EAAkCM,SAAlC,CAAP;AACD;;AACD,SAAOH,OAAP;AACD;;AAED,eAAeN,UAAf","sourcesContent":["import createCtor from './_createCtor.js';\r\nimport root from './_root.js';\r\n\r\n/** Used to compose bitmasks for function metadata. */\r\nvar WRAP_BIND_FLAG = 1;\r\n\r\n/**\r\n * Creates a function that wraps `func` to invoke it with the optional `this`\r\n * binding of `thisArg`.\r\n *\r\n * @private\r\n * @param {Function} func The function to wrap.\r\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n * @param {*} [thisArg] The `this` binding of `func`.\r\n * @returns {Function} Returns the new wrapped function.\r\n */\r\nfunction createBind(func, bitmask, thisArg) {\r\n  var isBind = bitmask & WRAP_BIND_FLAG,\r\n      Ctor = createCtor(func);\r\n\r\n  function wrapper() {\r\n    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\r\n    return fn.apply(isBind ? thisArg : this, arguments);\r\n  }\r\n  return wrapper;\r\n}\r\n\r\nexport default createBind;\r\n"]},"metadata":{},"sourceType":"module"}