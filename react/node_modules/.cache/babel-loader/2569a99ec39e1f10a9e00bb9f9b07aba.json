{"ast":null,"code":"import isLaziable from './_isLaziable.js';\nimport setData from './_setData.js';\nimport setWrapToString from './_setWrapToString.js';\n/** Used to compose bitmasks for function metadata. */\n\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_BOUND_FLAG = 4,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64;\n/**\r\n * Creates a function that wraps `func` to continue currying.\r\n *\r\n * @private\r\n * @param {Function} func The function to wrap.\r\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n * @param {Function} wrapFunc The function to create the `func` wrapper.\r\n * @param {*} placeholder The placeholder value.\r\n * @param {*} [thisArg] The `this` binding of `func`.\r\n * @param {Array} [partials] The arguments to prepend to those provided to\r\n *  the new function.\r\n * @param {Array} [holders] The `partials` placeholder indexes.\r\n * @param {Array} [argPos] The argument positions of the new function.\r\n * @param {number} [ary] The arity cap of `func`.\r\n * @param {number} [arity] The arity of `func`.\r\n * @returns {Function} Returns the new wrapped function.\r\n */\n\nfunction createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n  var isCurry = bitmask & WRAP_CURRY_FLAG,\n      newHolders = isCurry ? holders : undefined,\n      newHoldersRight = isCurry ? undefined : holders,\n      newPartials = isCurry ? partials : undefined,\n      newPartialsRight = isCurry ? undefined : partials;\n  bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;\n  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n  }\n\n  var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];\n  var result = wrapFunc.apply(undefined, newData);\n\n  if (isLaziable(func)) {\n    setData(result, newData);\n  }\n\n  result.placeholder = placeholder;\n  return setWrapToString(result, func, bitmask);\n}\n\nexport default createRecurry;","map":{"version":3,"sources":["C:/Users/xuebi/Desktop/EasyJobs/react/node_modules/lodash-es/_createRecurry.js"],"names":["isLaziable","setData","setWrapToString","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_CURRY_BOUND_FLAG","WRAP_CURRY_FLAG","WRAP_PARTIAL_FLAG","WRAP_PARTIAL_RIGHT_FLAG","createRecurry","func","bitmask","wrapFunc","placeholder","thisArg","partials","holders","argPos","ary","arity","isCurry","newHolders","undefined","newHoldersRight","newPartials","newPartialsRight","newData","result","apply"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AAEA;;AACA,IAAIC,cAAc,GAAG,CAArB;AAAA,IACIC,kBAAkB,GAAG,CADzB;AAAA,IAEIC,qBAAqB,GAAG,CAF5B;AAAA,IAGIC,eAAe,GAAG,CAHtB;AAAA,IAIIC,iBAAiB,GAAG,EAJxB;AAAA,IAKIC,uBAAuB,GAAG,EAL9B;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsCC,QAAtC,EAAgDC,WAAhD,EAA6DC,OAA7D,EAAsEC,QAAtE,EAAgFC,OAAhF,EAAyFC,MAAzF,EAAiGC,GAAjG,EAAsGC,KAAtG,EAA6G;AAC3G,MAAIC,OAAO,GAAGT,OAAO,GAAGL,eAAxB;AAAA,MACIe,UAAU,GAAGD,OAAO,GAAGJ,OAAH,GAAaM,SADrC;AAAA,MAEIC,eAAe,GAAGH,OAAO,GAAGE,SAAH,GAAeN,OAF5C;AAAA,MAGIQ,WAAW,GAAGJ,OAAO,GAAGL,QAAH,GAAcO,SAHvC;AAAA,MAIIG,gBAAgB,GAAGL,OAAO,GAAGE,SAAH,GAAeP,QAJ7C;AAMAJ,EAAAA,OAAO,IAAKS,OAAO,GAAGb,iBAAH,GAAuBC,uBAA1C;AACAG,EAAAA,OAAO,IAAI,EAAES,OAAO,GAAGZ,uBAAH,GAA6BD,iBAAtC,CAAX;;AAEA,MAAI,EAAEI,OAAO,GAAGN,qBAAZ,CAAJ,EAAwC;AACtCM,IAAAA,OAAO,IAAI,EAAER,cAAc,GAAGC,kBAAnB,CAAX;AACD;;AACD,MAAIsB,OAAO,GAAG,CACZhB,IADY,EACNC,OADM,EACGG,OADH,EACYU,WADZ,EACyBH,UADzB,EACqCI,gBADrC,EAEZF,eAFY,EAEKN,MAFL,EAEaC,GAFb,EAEkBC,KAFlB,CAAd;AAKA,MAAIQ,MAAM,GAAGf,QAAQ,CAACgB,KAAT,CAAeN,SAAf,EAA0BI,OAA1B,CAAb;;AACA,MAAI1B,UAAU,CAACU,IAAD,CAAd,EAAsB;AACpBT,IAAAA,OAAO,CAAC0B,MAAD,EAASD,OAAT,CAAP;AACD;;AACDC,EAAAA,MAAM,CAACd,WAAP,GAAqBA,WAArB;AACA,SAAOX,eAAe,CAACyB,MAAD,EAASjB,IAAT,EAAeC,OAAf,CAAtB;AACD;;AAED,eAAeF,aAAf","sourcesContent":["import isLaziable from './_isLaziable.js';\r\nimport setData from './_setData.js';\r\nimport setWrapToString from './_setWrapToString.js';\r\n\r\n/** Used to compose bitmasks for function metadata. */\r\nvar WRAP_BIND_FLAG = 1,\r\n    WRAP_BIND_KEY_FLAG = 2,\r\n    WRAP_CURRY_BOUND_FLAG = 4,\r\n    WRAP_CURRY_FLAG = 8,\r\n    WRAP_PARTIAL_FLAG = 32,\r\n    WRAP_PARTIAL_RIGHT_FLAG = 64;\r\n\r\n/**\r\n * Creates a function that wraps `func` to continue currying.\r\n *\r\n * @private\r\n * @param {Function} func The function to wrap.\r\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n * @param {Function} wrapFunc The function to create the `func` wrapper.\r\n * @param {*} placeholder The placeholder value.\r\n * @param {*} [thisArg] The `this` binding of `func`.\r\n * @param {Array} [partials] The arguments to prepend to those provided to\r\n *  the new function.\r\n * @param {Array} [holders] The `partials` placeholder indexes.\r\n * @param {Array} [argPos] The argument positions of the new function.\r\n * @param {number} [ary] The arity cap of `func`.\r\n * @param {number} [arity] The arity of `func`.\r\n * @returns {Function} Returns the new wrapped function.\r\n */\r\nfunction createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\r\n  var isCurry = bitmask & WRAP_CURRY_FLAG,\r\n      newHolders = isCurry ? holders : undefined,\r\n      newHoldersRight = isCurry ? undefined : holders,\r\n      newPartials = isCurry ? partials : undefined,\r\n      newPartialsRight = isCurry ? undefined : partials;\r\n\r\n  bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\r\n  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\r\n\r\n  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\r\n    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\r\n  }\r\n  var newData = [\r\n    func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\r\n    newHoldersRight, argPos, ary, arity\r\n  ];\r\n\r\n  var result = wrapFunc.apply(undefined, newData);\r\n  if (isLaziable(func)) {\r\n    setData(result, newData);\r\n  }\r\n  result.placeholder = placeholder;\r\n  return setWrapToString(result, func, bitmask);\r\n}\r\n\r\nexport default createRecurry;\r\n"]},"metadata":{},"sourceType":"module"}