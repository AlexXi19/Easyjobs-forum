{"ast":null,"code":"import apply from './_apply.js';\nimport createCtor from './_createCtor.js';\nimport root from './_root.js';\n/** Used to compose bitmasks for function metadata. */\n\nvar WRAP_BIND_FLAG = 1;\n/**\r\n * Creates a function that wraps `func` to invoke it with the `this` binding\r\n * of `thisArg` and `partials` prepended to the arguments it receives.\r\n *\r\n * @private\r\n * @param {Function} func The function to wrap.\r\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n * @param {*} thisArg The `this` binding of `func`.\r\n * @param {Array} partials The arguments to prepend to those provided to\r\n *  the new function.\r\n * @returns {Function} Returns the new wrapped function.\r\n */\n\nfunction createPartial(func, bitmask, thisArg, partials) {\n  var isBind = bitmask & WRAP_BIND_FLAG,\n      Ctor = createCtor(func);\n\n  function wrapper() {\n    var argsIndex = -1,\n        argsLength = arguments.length,\n        leftIndex = -1,\n        leftLength = partials.length,\n        args = Array(leftLength + argsLength),\n        fn = this && this !== root && this instanceof wrapper ? Ctor : func;\n\n    while (++leftIndex < leftLength) {\n      args[leftIndex] = partials[leftIndex];\n    }\n\n    while (argsLength--) {\n      args[leftIndex++] = arguments[++argsIndex];\n    }\n\n    return apply(fn, isBind ? thisArg : this, args);\n  }\n\n  return wrapper;\n}\n\nexport default createPartial;","map":{"version":3,"sources":["C:/Users/xuebi/Desktop/EasyJobs/react/node_modules/lodash-es/_createPartial.js"],"names":["apply","createCtor","root","WRAP_BIND_FLAG","createPartial","func","bitmask","thisArg","partials","isBind","Ctor","wrapper","argsIndex","argsLength","arguments","length","leftIndex","leftLength","args","Array","fn"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAEA;;AACA,IAAIC,cAAc,GAAG,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsCC,OAAtC,EAA+CC,QAA/C,EAAyD;AACvD,MAAIC,MAAM,GAAGH,OAAO,GAAGH,cAAvB;AAAA,MACIO,IAAI,GAAGT,UAAU,CAACI,IAAD,CADrB;;AAGA,WAASM,OAAT,GAAmB;AACjB,QAAIC,SAAS,GAAG,CAAC,CAAjB;AAAA,QACIC,UAAU,GAAGC,SAAS,CAACC,MAD3B;AAAA,QAEIC,SAAS,GAAG,CAAC,CAFjB;AAAA,QAGIC,UAAU,GAAGT,QAAQ,CAACO,MAH1B;AAAA,QAIIG,IAAI,GAAGC,KAAK,CAACF,UAAU,GAAGJ,UAAd,CAJhB;AAAA,QAKIO,EAAE,GAAI,QAAQ,SAASlB,IAAjB,IAAyB,gBAAgBS,OAA1C,GAAqDD,IAArD,GAA4DL,IALrE;;AAOA,WAAO,EAAEW,SAAF,GAAcC,UAArB,EAAiC;AAC/BC,MAAAA,IAAI,CAACF,SAAD,CAAJ,GAAkBR,QAAQ,CAACQ,SAAD,CAA1B;AACD;;AACD,WAAOH,UAAU,EAAjB,EAAqB;AACnBK,MAAAA,IAAI,CAACF,SAAS,EAAV,CAAJ,GAAoBF,SAAS,CAAC,EAAEF,SAAH,CAA7B;AACD;;AACD,WAAOZ,KAAK,CAACoB,EAAD,EAAKX,MAAM,GAAGF,OAAH,GAAa,IAAxB,EAA8BW,IAA9B,CAAZ;AACD;;AACD,SAAOP,OAAP;AACD;;AAED,eAAeP,aAAf","sourcesContent":["import apply from './_apply.js';\r\nimport createCtor from './_createCtor.js';\r\nimport root from './_root.js';\r\n\r\n/** Used to compose bitmasks for function metadata. */\r\nvar WRAP_BIND_FLAG = 1;\r\n\r\n/**\r\n * Creates a function that wraps `func` to invoke it with the `this` binding\r\n * of `thisArg` and `partials` prepended to the arguments it receives.\r\n *\r\n * @private\r\n * @param {Function} func The function to wrap.\r\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n * @param {*} thisArg The `this` binding of `func`.\r\n * @param {Array} partials The arguments to prepend to those provided to\r\n *  the new function.\r\n * @returns {Function} Returns the new wrapped function.\r\n */\r\nfunction createPartial(func, bitmask, thisArg, partials) {\r\n  var isBind = bitmask & WRAP_BIND_FLAG,\r\n      Ctor = createCtor(func);\r\n\r\n  function wrapper() {\r\n    var argsIndex = -1,\r\n        argsLength = arguments.length,\r\n        leftIndex = -1,\r\n        leftLength = partials.length,\r\n        args = Array(leftLength + argsLength),\r\n        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\r\n\r\n    while (++leftIndex < leftLength) {\r\n      args[leftIndex] = partials[leftIndex];\r\n    }\r\n    while (argsLength--) {\r\n      args[leftIndex++] = arguments[++argsIndex];\r\n    }\r\n    return apply(fn, isBind ? thisArg : this, args);\r\n  }\r\n  return wrapper;\r\n}\r\n\r\nexport default createPartial;\r\n"]},"metadata":{},"sourceType":"module"}