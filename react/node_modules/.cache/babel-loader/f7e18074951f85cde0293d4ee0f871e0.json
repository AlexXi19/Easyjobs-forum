{"ast":null,"code":"import copyArray from './_copyArray.js';\nimport isIndex from './_isIndex.js';\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\nvar nativeMin = Math.min;\n/**\r\n * Reorder `array` according to the specified indexes where the element at\r\n * the first index is assigned as the first element, the element at\r\n * the second index is assigned as the second element, and so on.\r\n *\r\n * @private\r\n * @param {Array} array The array to reorder.\r\n * @param {Array} indexes The arranged array indexes.\r\n * @returns {Array} Returns `array`.\r\n */\n\nfunction reorder(array, indexes) {\n  var arrLength = array.length,\n      length = nativeMin(indexes.length, arrLength),\n      oldArray = copyArray(array);\n\n  while (length--) {\n    var index = indexes[length];\n    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n  }\n\n  return array;\n}\n\nexport default reorder;","map":{"version":3,"sources":["C:/Users/xuebi/Desktop/EasyJobs/react/node_modules/lodash-es/_reorder.js"],"names":["copyArray","isIndex","nativeMin","Math","min","reorder","array","indexes","arrLength","length","oldArray","index","undefined"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,OAAP,MAAoB,eAApB;AAEA;;AACA,IAAIC,SAAS,GAAGC,IAAI,CAACC,GAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,OAAxB,EAAiC;AAC/B,MAAIC,SAAS,GAAGF,KAAK,CAACG,MAAtB;AAAA,MACIA,MAAM,GAAGP,SAAS,CAACK,OAAO,CAACE,MAAT,EAAiBD,SAAjB,CADtB;AAAA,MAEIE,QAAQ,GAAGV,SAAS,CAACM,KAAD,CAFxB;;AAIA,SAAOG,MAAM,EAAb,EAAiB;AACf,QAAIE,KAAK,GAAGJ,OAAO,CAACE,MAAD,CAAnB;AACAH,IAAAA,KAAK,CAACG,MAAD,CAAL,GAAgBR,OAAO,CAACU,KAAD,EAAQH,SAAR,CAAP,GAA4BE,QAAQ,CAACC,KAAD,CAApC,GAA8CC,SAA9D;AACD;;AACD,SAAON,KAAP;AACD;;AAED,eAAeD,OAAf","sourcesContent":["import copyArray from './_copyArray.js';\r\nimport isIndex from './_isIndex.js';\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeMin = Math.min;\r\n\r\n/**\r\n * Reorder `array` according to the specified indexes where the element at\r\n * the first index is assigned as the first element, the element at\r\n * the second index is assigned as the second element, and so on.\r\n *\r\n * @private\r\n * @param {Array} array The array to reorder.\r\n * @param {Array} indexes The arranged array indexes.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction reorder(array, indexes) {\r\n  var arrLength = array.length,\r\n      length = nativeMin(indexes.length, arrLength),\r\n      oldArray = copyArray(array);\r\n\r\n  while (length--) {\r\n    var index = indexes[length];\r\n    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\r\n  }\r\n  return array;\r\n}\r\n\r\nexport default reorder;\r\n"]},"metadata":{},"sourceType":"module"}