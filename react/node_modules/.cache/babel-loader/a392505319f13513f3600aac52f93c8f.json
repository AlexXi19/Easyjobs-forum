{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\r\n * A pushable sub-component for Sidebar.\r\n */\n\nfunction SidebarPusher(props) {\n  var className = props.className,\n      dimmed = props.dimmed,\n      children = props.children,\n      content = props.content;\n  var classes = cx('pusher', useKeyOnly(dimmed, 'dimmed'), className);\n  var rest = getUnhandledProps(SidebarPusher, props);\n  var ElementType = getElementType(SidebarPusher, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSidebarPusher.handledProps = [\"as\", \"children\", \"className\", \"content\", \"dimmed\"];\nSidebarPusher.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Controls whether or not the dim is displayed. */\n  dimmed: PropTypes.bool\n} : {};\nexport default SidebarPusher;","map":{"version":3,"sources":["C:/Users/xuebi/Desktop/EasyJobs/react/node_modules/semantic-ui-react/dist/es/modules/Sidebar/SidebarPusher.js"],"names":["_extends","cx","PropTypes","React","childrenUtils","customPropTypes","getElementType","getUnhandledProps","useKeyOnly","SidebarPusher","props","className","dimmed","children","content","classes","rest","ElementType","createElement","isNil","handledProps","propTypes","process","env","NODE_ENV","as","elementType","node","string","contentShorthand","bool"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,EAAP,MAAe,MAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,cAAzC,EAAyDC,iBAAzD,EAA4EC,UAA5E,QAA8F,WAA9F;AACA;AACA;AACA;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,MAAIC,SAAS,GAAGD,KAAK,CAACC,SAAtB;AAAA,MACIC,MAAM,GAAGF,KAAK,CAACE,MADnB;AAAA,MAEIC,QAAQ,GAAGH,KAAK,CAACG,QAFrB;AAAA,MAGIC,OAAO,GAAGJ,KAAK,CAACI,OAHpB;AAIA,MAAIC,OAAO,GAAGd,EAAE,CAAC,QAAD,EAAWO,UAAU,CAACI,MAAD,EAAS,QAAT,CAArB,EAAyCD,SAAzC,CAAhB;AACA,MAAIK,IAAI,GAAGT,iBAAiB,CAACE,aAAD,EAAgBC,KAAhB,CAA5B;AACA,MAAIO,WAAW,GAAGX,cAAc,CAACG,aAAD,EAAgBC,KAAhB,CAAhC;AACA,SAAO,aAAaP,KAAK,CAACe,aAAN,CAAoBD,WAApB,EAAiCjB,QAAQ,CAAC,EAAD,EAAKgB,IAAL,EAAW;AACtEL,IAAAA,SAAS,EAAEI;AAD2D,GAAX,CAAzC,EAEhBX,aAAa,CAACe,KAAd,CAAoBN,QAApB,IAAgCC,OAAhC,GAA0CD,QAF1B,CAApB;AAGD;;AAEDJ,aAAa,CAACW,YAAd,GAA6B,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,SAAhC,EAA2C,QAA3C,CAA7B;AACAX,aAAa,CAACY,SAAd,GAA0BC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAChE;AACAC,EAAAA,EAAE,EAAEvB,SAAS,CAACwB,WAFkD;;AAIhE;AACAb,EAAAA,QAAQ,EAAEX,SAAS,CAACyB,IAL4C;;AAOhE;AACAhB,EAAAA,SAAS,EAAET,SAAS,CAAC0B,MAR2C;;AAUhE;AACAd,EAAAA,OAAO,EAAET,eAAe,CAACwB,gBAXuC;;AAahE;AACAjB,EAAAA,MAAM,EAAEV,SAAS,CAAC4B;AAd8C,CAAxC,GAetB,EAfJ;AAgBA,eAAerB,aAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport cx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\r\n/**\r\n * A pushable sub-component for Sidebar.\r\n */\r\n\r\nfunction SidebarPusher(props) {\r\n  var className = props.className,\r\n      dimmed = props.dimmed,\r\n      children = props.children,\r\n      content = props.content;\r\n  var classes = cx('pusher', useKeyOnly(dimmed, 'dimmed'), className);\r\n  var rest = getUnhandledProps(SidebarPusher, props);\r\n  var ElementType = getElementType(SidebarPusher, props);\r\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\r\n    className: classes\r\n  }), childrenUtils.isNil(children) ? content : children);\r\n}\r\n\r\nSidebarPusher.handledProps = [\"as\", \"children\", \"className\", \"content\", \"dimmed\"];\r\nSidebarPusher.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: PropTypes.elementType,\r\n\r\n  /** Primary content. */\r\n  children: PropTypes.node,\r\n\r\n  /** Additional classes. */\r\n  className: PropTypes.string,\r\n\r\n  /** Shorthand for primary content. */\r\n  content: customPropTypes.contentShorthand,\r\n\r\n  /** Controls whether or not the dim is displayed. */\r\n  dimmed: PropTypes.bool\r\n} : {};\r\nexport default SidebarPusher;"]},"metadata":{},"sourceType":"module"}